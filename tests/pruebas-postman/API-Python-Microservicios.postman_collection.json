{
	"info": {
		"_postman_id": "9688ceef-7694-4739-b2ca-379fdd25770a",
		"name": "API-Python-Microservicios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27630454"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "get_users",
					"item": [
						{
							"name": "Get-User-List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"El codigo de estado de respuesta debe ser 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar la 'page' predeterminada en la respuesta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.page).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar el campo 'per_page' predeterminado en la respuesta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.per_page).to.exist.and.to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"El arreglo de usuarios debe estar presente y no puede ser nulo\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.users).to.exist;\r",
											"    pm.expect(responseData.users).to.be.an('array').that.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{root_route_users}}/users?page=4&per_page=5",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "4"
										},
										{
											"key": "per_page",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get-User-Is-None",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"El codido de estado de respuesta debe ser 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar el campo de error en la respuesta.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"El tiempo de respuesta debe ser menor a 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{root_route_users}}/users?page=1000&per_page=1002",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1000"
										},
										{
											"key": "per_page",
											"value": "1002"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get-User-Search-Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"El codigo de estado de respuesta debe ser 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar la 'page' y el campo 'per_page'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.page).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.per_page).to.exist.and.to.be.a('number');\r",
											"});\r",
											"\r",
											"var responseJSON = pm.response.json();\r",
											"\r",
											"// Test the response body structure and values\r",
											"pm.test(\"Verificar si la estrctura de cuerpo de respuesta es valida\", function () {\r",
											"    pm.expect(responseJSON).has.property('page');\r",
											"    pm.expect(responseJSON).has.property('per_page');\r",
											"    pm.expect(responseJSON).has.property('search_name');\r",
											"    pm.expect(responseJSON).has.property('users');\r",
											"});\r",
											"\r",
											"// checking that each user object has the required properties\r",
											"pm.test(\"Verfificar si la estructura del objeto Usuario es valida\", function () {\r",
											"    responseJSON.users.forEach((user) => {\r",
											"        pm.expect(user).has.property('id');\r",
											"        pm.expect(user).has.property('nombre');\r",
											"        pm.expect(user).has.property('apellido');\r",
											"        pm.expect(user).has.property('clave');\r",
											"        pm.expect(user).has.property('creado_en');\r",
											"        pm.expect(user).has.property('email');\r",
											"        pm.expect(user).has.property('fecha_nacimiento');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{root_route_users}}/users?search_name=juan",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "search_name",
											"value": "juan"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "register_user",
					"item": [
						{
							"name": "Register-User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"El codigo de estado de respuesta debe ser 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta tiene el campo 'mensaje'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"El mensaje no viene vacio\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"El tiempo de respuesta es inferior a 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"apellido\": \"{{apellido-registered}}\",\r\n  \"fecha_nacimiento\": \"{{fecha-nacimiento-registered}}\",\r\n  \"email\": \"{{email-registered}}\",\r\n  \"nombre\": \"{{nombre-registered}}\",\r\n  \"clave\": \"{{clave-registered}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{root_route_users}}/users",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register-Users-No-Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"El codigo de estado de respuesta debe ser 400\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"La respuetsa tiene el campo 'error' \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.error).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"El campo 'error' no esta vacio\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"El tiempo de respuesta es inferior a 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"La respuesta es un JSON \", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"apellido\": \"Zambrano\",\r\n  \"fecha_nacimiento\": \"2002-11-18\",\r\n  \"email\": \"\",\r\n  \"nombre\": \"\",\r\n  \"clave\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{root_route_users}}/users",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register-Users-Date-Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"El codigo de estado de respuesta debe ser 500\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"La respuetsa tiene el campo 'error'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.error).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"El campo 'error' no esta vacio\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"El tiempo de respuesta está en un rango aceptable\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"La respuesta está en formato JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"apellido\": \"Zambrano\",\r\n  \"fecha_nacimiento\": \"11-18-2002\",\r\n  \"email\": \"AlejandroZ@gmail.com\",\r\n  \"nombre\": \"Alejandro\",\r\n  \"clave\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{root_route_users}}/users",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "post_login",
					"item": [
						{
							"name": "Login-User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"pm.environment.set(\"id-loguedin\", responseData.id_user);",
											"pm.environment.set(\"token\", responseData.token);",
											"",
											"pm.test(\"El codigo de estado de respuesta debe ser 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"La respuesta tiene los campos obligatorios 'id_user' and 'token'\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id_user).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.token).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"'id_user' es un numero entero no negativo\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.id_user).to.be.a('number');",
											"    pm.expect(responseData.id_user).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"'Token' es una cadena no vacia\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"El tiempo de respuesta es inferior a 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"clave\": \"{{clave-registered}}\",\r\n  \"email\": \"{{email-registered}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{root_route_users}}/tokens",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"tokens"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login-User-Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"El codigo de estado de respuesta debe ser 401\", function () {",
											"  pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"La respuesta tiene el campo 'error'\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.error).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"El campo 'error' es un string no vacio\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"El tiempo de respuesta es inferior a 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"clave\": \"123456\",\r\n  \"email\": \"AlejandroZ@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{root_route_users}}/tokens",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"tokens"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_user_Id",
					"item": [
						{
							"name": "Get-User-By-Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"El codigo de estado de respuesta debe ser 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"La respuesta tiene los campos obligatorios\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.apellido).to.exist;",
											"    pm.expect(responseData.clave).to.exist;",
											"    pm.expect(responseData.creado_en).to.exist;",
											"    pm.expect(responseData.email).to.exist;",
											"    pm.expect(responseData.fecha_nacimiento).to.exist;",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.nombre).to.exist;",
											"});",
											"",
											"pm.test(\"'id' es un entero no negativo\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"id should be a non-negative integer\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{root_route_users}}/users/{{id-loguedin}}",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users",
										"{{id-loguedin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get-User-By-Id-Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"El codigo de estado de respuesta debe ser 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"pm.test(\"El mensaje de error no esta vacio\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"El mensaje de error es un string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"El tiempo de respuesta es inferior 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{root_route_users}}/users/1000",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users",
										"1000"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update_user",
					"item": [
						{
							"name": "Update-Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"El codigo de estado de respuesta debe ser 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"La respuesta tiene los campos obligatorios\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"El mensaje no esta vacio\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"El mensaje es un string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"El tiempo de respuesta es inferior a 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"{{nombre-nuevo-loguedin}}\",\r\n    \"apellido\": \"{{apellido-registered}}\",\r\n    \"email\": \"{{email-registered}}\",\r\n    \"clave\": \"{{clave-registered}}\",\r\n    \"fecha_nacimiento\": \"{{fecha-nacimiento-registered}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{root_route_users}}/users",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update-Username-Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"El codigo de estado de respuesta debe ser 401\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"La respuesta tiene el campo 'error'\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"El mensaje de error no esta vacio\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"El mensaje de error es un string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"El tiempo de respuesta esta en un rango aceptable\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "tokeninvalido",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"Oscar\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{root_route_users}}/users",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update_password",
					"item": [
						{
							"name": "Update-Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"El codigo de estado de respuesta debe ser 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"La respuesta tiene el campo 'mensaje'\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.have.property(\"message\");",
											"});",
											"",
											"",
											"pm.test(\"Mensaje es un string no vacio\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"El tiempo de respuesta es inferior a 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nueva_clave\": \"{{clave-nueva-loguedin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{root_route_users}}/users/user/new-password",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users",
										"user",
										"new-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update-Password-Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"El codigo de estado de respuesta debe ser 401\", function () {",
											"  pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"La respuesta tiene el campo 'error'\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.error).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"El campo 'error' es un string no vacio\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"El tiempo de respuesta es inferior 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "tokennovalido",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nueva_clave\": \"1234567\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{root_route_users}}/users/user/new-password",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users",
										"user",
										"new-password"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete_user",
					"item": [
						{
							"name": "Delete-User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"El codigo de estado de respuesta debe ser 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"La respuesta tiene el campo 'mensaje'\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"El mensaje es un string no vacio\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.message).to.be.a('string');",
											"    pm.expect(responseData.message).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"El tiempo de respuesta es inferior a 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verificar si el usuario fue borrado de la base de datos\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"  pm.expect(pm.response.json().message).to.equal(\"Usuario eliminado exitosamente\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{root_route_users}}/users",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete-User-Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"El codigo de estado de respuesta debe ser 401\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"La respuesta tiene el campo 'error'\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"El campo 'error' es un string no vacio\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"El tiempo de respuesta es inferior a 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Verificar que el usuario no sea eliminado de la base de datos\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "tokeninvalido",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{root_route_users}}/users",
									"host": [
										"{{root_route_users}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "logs",
			"item": [
				{
					"name": "Get-Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Logs array should not be empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.logs).to.be.an('array').and.to.have.length.above(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Page and per_page values are non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.page).to.be.a('number').and.to.be.greaterThanOrEqual(0, \"Page value should be a non-negative integer\");\r",
									"    pm.expect(responseData.per_page).to.be.a('number').and.to.be.greaterThanOrEqual(0, \"per_page value should be a non-negative integer\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root_route_logs}}?page=3",
							"host": [
								"{{root_route_logs}}"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								},
								{
									"key": "per_page",
									"value": "2",
									"disabled": true
								},
								{
									"key": "initial_date",
									"value": "2020-10-01",
									"disabled": true
								},
								{
									"key": "final_date",
									"value": "2021-10-02",
									"disabled": true
								},
								{
									"key": "log_type",
									"value": "AUTH",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Logs-Failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 500\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root_route_logs}}?initial_date=2023-03-23&final_date=2020-03-22",
							"host": [
								"{{root_route_logs}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "per_page",
									"value": "2",
									"disabled": true
								},
								{
									"key": "log_type",
									"value": "AUTH",
									"disabled": true
								},
								{
									"key": "initial_date",
									"value": "2023-03-23"
								},
								{
									"key": "final_date",
									"value": "2020-03-22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Logs-Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the 'logs' array is present in the response and contains at least one element\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.logs).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the 'page' property exists in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.page).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root_route_logs}}?page=1&per_page=4&initial_date=2020-10-10&log_type=INFO",
							"host": [
								"{{root_route_logs}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "4"
								},
								{
									"key": "initial_date",
									"value": "2020-10-10"
								},
								{
									"key": "final_date",
									"value": "2020-10-20",
									"disabled": true
								},
								{
									"key": "log_type",
									"value": "INFO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Application-Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Logs array is present and contains at least one log entry\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.logs).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.logs.length).to.be.at.least(1, \"Logs array should contain at least one entry\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Page value is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.page).to.be.a('number');\r",
									"    pm.expect(responseData.page).to.be.at.least(0, \"Page value should be non-negative\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root_route_logs}}/{{application}}",
							"host": [
								"{{root_route_logs}}"
							],
							"path": [
								"{{application}}"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "per_page",
									"value": "",
									"disabled": true
								},
								{
									"key": "initial_date",
									"value": "2020-10-10",
									"disabled": true
								},
								{
									"key": "final_date",
									"value": "2020-10-02",
									"disabled": true
								},
								{
									"key": "log_type",
									"value": "AUTH",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register-Logs-Correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response body does not contain any sensitive information\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.not.include(\"password\");\r",
									"    pm.expect(responseData.message).to.not.include(\"credit card\");\r",
									"    pm.expect(responseData.message).to.not.include(\"social security number\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TIPO-LOG\": \"INFO\",\r\n    \"METODO-HTTP\": \"POST.\",\r\n    \"RUTA\": \"/logs.\",\r\n    \"MODULO\": \"ROUTES.PY\",\r\n    \"APLICACION\": \"LOGS_API_REST\",\r\n    \"FECHA\": \"2023-10-03 15:39:14.861564\",\r\n    \"IP\": \"172.18.0.1\",\r\n    \"ACCION\": \"SE HA CREADO UN NUEVO LOG DESDE LA API DE LOGS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root_route_logs}}",
							"host": [
								"{{root_route_logs}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "per_page",
									"value": "2",
									"disabled": true
								},
								{
									"key": "initial_date",
									"value": "2020-10-01",
									"disabled": true
								},
								{
									"key": "final_date",
									"value": "2021-10-02",
									"disabled": true
								},
								{
									"key": "log_type",
									"value": "AUTH",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register-Logs-Failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field 'error'\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('error');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The error field is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response does not contain any additional fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(Object.keys(responseData)).to.have.lengthOf(1, \"Response should only contain 'error' field\");\r",
									"  pm.expect(responseData.error).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TIPO-LOG\": \"INFO\",\r\n    \"METODO-HTTP\": \"POST.\",\r\n    \"RUTA\": \"/logs.\",\r\n    \"MODULO\": \"ROUTES.PY\",\r\n    \"APLICACION\": \"LOGS_API_REST\",\r\n    \"FECHA\": \"2023-10-03 15:39:14.861564\",\r\n    \"ACCION\": \"SE HA CREADO UN NUEVO LOG DESDE LA API DE LOGS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root_route_logs}}",
							"host": [
								"{{root_route_logs}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "per_page",
									"value": "2",
									"disabled": true
								},
								{
									"key": "initial_date",
									"value": "2020-10-01",
									"disabled": true
								},
								{
									"key": "final_date",
									"value": "2021-10-02",
									"disabled": true
								},
								{
									"key": "log_type",
									"value": "AUTH",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "profiles",
			"item": [
				{
					"name": "Login-User-For_Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"pm.environment.set(\"id-loguedin\", responseData.id_user);",
									"pm.environment.set(\"token\", responseData.token);",
									"",
									"pm.test(\"El codigo de estado de respuesta debe ser 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"La respuesta tiene los campos obligatorios 'id_user' and 'token'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id_user).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"'id_user' es un numero entero no negativo\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id_user).to.be.a('number');",
									"    pm.expect(responseData.id_user).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"'Token' es una cadena no vacia\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"El tiempo de respuesta es inferior a 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"clave\": \"maria\",\r\n  \"email\": \"maria@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root_route_users}}/tokens",
							"host": [
								"{{root_route_users}}"
							],
							"path": [
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-All-Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    pm.expect(responseData).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function(profile) {\r",
									"        pm.expect(profile.id).to.be.a('number').and.to.be.greaterThan(-1);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Apodo is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  \r",
									"  responseData.forEach(function(profile) {\r",
									"    pm.expect(profile.apodo).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Informacion publica is either 0 or 1\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function (profile) {\r",
									"        pm.expect(profile.informacion_publica).to.be.oneOf([0, 1]);\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root_route_profiles}}",
							"host": [
								"{{root_route_profiles}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the 'id' field\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the 'url_pagina' field\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.url_pagina).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the 'apodo' field\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.apodo).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the informacion_publica field\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.informacion_publica).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root_route_profiles}}/2",
							"host": [
								"{{root_route_profiles}}"
							],
							"path": [
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Profile-Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response has the required field - mensaje\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.mensaje).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensaje is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.mensaje).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response does not have any additional fields other than 'mensaje'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(Object.keys(responseData)).to.have.lengthOf(1, \"Response should only have one field\");\r",
									"    pm.expect(responseData).to.have.property('mensaje');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root_route_profiles}}/1000",
							"host": [
								"{{root_route_profiles}}"
							],
							"path": [
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.mensaje).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.detalles).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensaje is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.mensaje).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Detalles is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.detalles).to.exist.and.to.be.a('string');\r",
									"  pm.expect(responseData.detalles).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"url_pagina\": \"marianela.com\",\r\n    \"apodo\": \"Marianela321\",\r\n    \"informacion_publica\": 1,\r\n    \"direccion_correspondencia\": \"Av. Principal #45\",\r\n    \"biografia\": \"Marilu es una apasionada de la mÃºsica y le encanta viajar.\",\r\n    \"organizacion\": \"MusicCorp\",\r\n    \"pais\": \"Alemania\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root_route_profiles}}/2",
							"host": [
								"{{root_route_profiles}}"
							],
							"path": [
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create-Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - mensaje and detalles\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.mensaje).to.exist;\r",
									"  pm.expect(responseData.detalles).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensaje is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.mensaje).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Mensaje should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Detalles is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.detalles).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); // Assuming an acceptable range is below 1000ms\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Sebas\",\r\n    \"apellido\": \"Burgos\",\r\n    \"email\": \"sebastianburgos@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root_route_profiles}}",
							"host": [
								"{{root_route_profiles}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-Profile-Fail-Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field 'mensaje'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.mensaje).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The 'mensaje' field is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.mensaje).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"url_pagina\": \"marianela.com\",\r\n    \"apodo\": \"Marianela321\",\r\n    \"informacion_publica\": 1,\r\n    \"direccion_correspondencia\": \"Av. Principal #45\",\r\n    \"biografia\": \"Marilu es una apasionada de la mÃºsica y le encanta viajar.\",\r\n    \"organizacion\": \"MusicCorp\",\r\n    \"pais\": \"Alemania\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root_route_profiles}}/2",
							"host": [
								"{{root_route_profiles}}"
							],
							"path": [
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-Profile-Fail-Not-Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - mensaje and detalles\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.mensaje).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.detalles).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensaje is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.mensaje).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Mensaje should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Detalles is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.detalles).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"url_pagina\": \"marianela.com\",\r\n    \"apodo\": \"Marianela321\",\r\n    \"informacion_publica\": 1,\r\n    \"direccion_correspondencia\": \"Av. Principal #45\",\r\n    \"biografia\": \"Marilu es una apasionada de la mÃºsica y le encanta viajar.\",\r\n    \"organizacion\": \"MusicCorp\",\r\n    \"pais\": \"Alemania\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root_route_profiles}}/1000",
							"host": [
								"{{root_route_profiles}}"
							],
							"path": [
								"1000"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}